attacker[active]

principal Alice[] //in our description tis is Client
principal Bob[] // in our description this is Server

principal Alice
[
    generates a, s //generates a and salt
    knows private skA, p, I//knows secret key, password and user name
    ga = G^a //Diffie-Helman key
    x = HASH(s, p)
    v = G^x
    sigA = sign(skA, ga) //siganture key - private key and message
]

Alice -> Bob: ga, sigA, v,s, I

principal Bob
[
    generates b, N //generate b and N- big prime number
    knows private skB, skA //knows secret key Bob's and Alice's
    validateB = SIGNVERIF(G^skA, ga, sigA)? //verifies signature 
    gb = G^b //Diffie-Helman key
    k = HASH(N, G)
    sigB = SIGN(skB, gb) //siganture key - private key and message
    u=HASH(ga,gb) //both Bob and Alice calculate this
]

Bob -> Alice: gb, sigB, u

principal Alice
[
    knows private skB
    generates sa, pt1
    validateA = SIGNVERIF(G^skB, gb, sigB)? //verifies signature
    M1=ENC(HASH(CONCAT(ga,gb,Sa)),pt1) // symetric encyryption of hash, proof keys match
]

Alice -> Bob: M1
principal Bob[
    generates sb
    M2=DEC(HASH(CONCAT(ga,M1,Sb)),M1) //symetric decyryption of hash, proof keys match
]

queries
[
   authentication? Alice -> Bob: M1
    authentication? Bob -> Alice: sigB
    confidentiality?  pt1 //poufnosć
]